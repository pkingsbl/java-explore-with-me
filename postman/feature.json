{
	"info": {
		"_postman_id": "e1102fac-ba17-449c-9cdb-2adfa9d33b22",
		"name": "feature Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23407404"
	},
	"item": [
		{
			"name": "Validation",
			"item": [
				{
					"name": "Изменение комментария с некорректным body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    let comment;",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        const newComment = await api.addComment(user.id, event.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"cid\", newComment.id)",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }    ",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
									"    pm.response.to.be.badRequest;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Ошибка должна содержать поля: errors, message, reason, status, timestamp\", function () {",
									"    pm.expect(target).to.have.property('errors');",
									"    pm.expect(target).to.have.property('message');",
									"    pm.expect(target).to.have.property('reason');",
									"    pm.expect(target).to.have.property('status');",
									"    pm.expect(target).to.have.property('timestamp');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "commentId",
									"value": "{{cid}}",
									"description": "(Required) id  комментария"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария с некорректным body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    let comment;",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        pm.collectionVariables.set(\"eid\", event.id)",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
									"    pm.response.to.be.badRequest;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Ошибка должна содержать поля: errors, message, reason, status, timestamp\", function () {",
									"    pm.expect(target).to.have.property('errors');",
									"    pm.expect(target).to.have.property('message');",
									"    pm.expect(target).to.have.property('reason');",
									"    pm.expect(target).to.have.property('status');",
									"    pm.expect(target).to.have.property('timestamp');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " { }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "{{eid}}",
									"description": "(Required) id события"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев к определенному событию без Query params",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    let comment;",
									"    try {",
									"        const user_1 = await api.addUser(rnd.getUser());",
									"        const user_2 = await api.addUser(rnd.getUser());",
									"        const category = await api.addCategory(rnd.getCategory());",
									"",
									"        const event = await api.addEvent(user_1.id, rnd.getEvent(category.id));",
									"        await api.addComment(user_1.id, event.id, rnd.getComment(event.id));",
									"        const comment_2 = await api.addComment(user_2.id, event.id, rnd.getComment());",
									"",
									"        pm.collectionVariables.set(\"response\", comment_2)",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
									"    pm.response.to.be.badRequest;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Forbidden",
			"item": [
				{
					"name": "Изменение комментария другим пользователем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    let comment;",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        const newComment = await api.addComment(user.id, event.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"cid\", newComment.id)",
									"        const newUser = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", newUser.id)",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {",
									"    pm.response.to.be.forbidden;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Ошибка должна содержать поля: errors, message, reason, status, timestamp\", function () {",
									"    pm.expect(target).to.have.property('errors');",
									"    pm.expect(target).to.have.property('message');",
									"    pm.expect(target).to.have.property('reason');",
									"    pm.expect(target).to.have.property('status');",
									"    pm.expect(target).to.have.property('timestamp');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\" : \"lol\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "commentId",
									"value": "{{cid}}",
									"description": "(Required) id  комментария"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария другим пользователем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    let comment;",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        const newComment = await api.addComment(user.id, event.id, rnd.getComment());",
									"        pm.collectionVariables.set(\"cid\", newComment.id)",
									"        const newUser = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", newUser.id)",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {",
									"    pm.response.to.be.forbidden;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Ошибка должна содержать поля: errors, message, reason, status, timestamp\", function () {",
									"    pm.expect(target).to.have.property('errors');",
									"    pm.expect(target).to.have.property('message');",
									"    pm.expect(target).to.have.property('reason');",
									"    pm.expect(target).to.have.property('status');",
									"    pm.expect(target).to.have.property('timestamp');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "commentId",
									"value": "{{cid}}",
									"description": "(Required) id  комментария"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Добавление нового комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let comment;",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"uid\", user.id)",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        pm.collectionVariables.set(\"eid\", event.id)",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Комментарий должен содержать поля: id, text, created, authorName, edited\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('text');",
							"pm.expect(target).to.have.property('created');",
							"pm.expect(target).to.have.property('authorName');",
							"pm.expect(target).to.have.property('edited');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(source.text).equal(target.text, 'Текст комментария должн соответствовать новому тексту');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\" : \"kek\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "{{eid}}",
							"description": "(Required) id события"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let comment;",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"uid\", user.id)",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        const newComment = await api.addComment(user.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set(\"cid\", newComment.id)",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.have.status(200);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Комментарий должен содержать поля: id, text, created, authorName, edited\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('text');",
							"pm.expect(target).to.have.property('created');",
							"pm.expect(target).to.have.property('authorName');",
							"pm.expect(target).to.have.property('edited');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(source.text).equal(target.text, 'Текст комментария должн соответствовать новому тексту');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\" : \"cheburek\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "commentId",
							"value": "{{cid}}",
							"description": "(Required) id  комментария"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев, добавленных текущим пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let comment;",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"uid\", user.id)",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        const event_1 = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        const comment_1 = await api.addComment(user.id, event_1.id, rnd.getComment(event_1.id));",
							"",
							"        const event_2 = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        const comment_2 = await api.addComment(user.id, event_1.id, rnd.getComment());",
							"",
							"        pm.collectionVariables.set(\"response\", comment_2)",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get('response');",
							"const target = pm.response.json();",
							"let founded;",
							"target.forEach(function(element){if (element.id == source.id) founded = element});",
							"",
							"pm.test(\"Комментарий должен содержать поля: id, text, created, author, edited\", function () {",
							"    pm.expect(target[0]).to.have.property('id');",
							"    pm.expect(target[0]).to.have.property('text');",
							"    pm.expect(target[0]).to.have.property('created');",
							"    pm.expect(target[0]).to.have.property('author');",
							"    pm.expect(target[0]).to.have.property('edited');",
							"});",
							"",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(source.id).equal(founded.id, 'Идентификатор комментария должен соответствовать идентификатору комментария добавленного ранее');",
							"    pm.expect(source.text).equal(founded.text, 'Текст комментария должн соответствовать тексту комментария добавленного ранее');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев к определенному событию",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let comment;",
							"    try {",
							"        const user_1 = await api.addUser(rnd.getUser());",
							"        const user_2 = await api.addUser(rnd.getUser());",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        const event = await api.addEvent(user_1.id, rnd.getEvent(category.id));",
							"        pm.collectionVariables.set(\"eid\", event.id)",
							"        await api.addComment(user_1.id, event.id, rnd.getComment());",
							"        const comment_2 = await api.addComment(user_2.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set(\"response\", comment_2)",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get('response');",
							"const target = pm.response.json();",
							"let founded;",
							"target.forEach(function(element){if (element.id == source.id) founded = element});",
							"",
							"pm.test(\"Комментарий должен содержать поля: id, text, created, author, edited\", function () {",
							"    pm.expect(target[0]).to.have.property('id');",
							"    pm.expect(target[0]).to.have.property('text');",
							"    pm.expect(target[0]).to.have.property('created');",
							"    pm.expect(target[0]).to.have.property('author');",
							"    pm.expect(target[0]).to.have.property('edited');",
							"});",
							"",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(source.id).equal(founded.id, 'Идентификатор комментария должен соответствовать идентификатору комментария добавленного ранее');",
							"    pm.expect(source.text).equal(founded.text, 'Текст комментария должн соответствовать тексту комментария добавленного ранее');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments?eventId={{eid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eid}}",
							"description": "(Required) id события"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение информации о комментарии по его идентификатору",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let comment;",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
							"",
							"        pm.collectionVariables.set(\"response\", comment)",
							"        pm.collectionVariables.set(\"cid\", comment.id)",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get('response');",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Комментарий должен содержать поля: id, text, created, author, edited\", function () {",
							"    pm.expect(target).to.have.property('id');",
							"    pm.expect(target).to.have.property('text');",
							"    pm.expect(target).to.have.property('created');",
							"    pm.expect(target).to.have.property('author');",
							"    pm.expect(target).to.have.property('edited');",
							"});",
							"",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(source.id).equal(target.id, 'Идентификатор комментария должен соответствовать идентификатору комментария добавленного ранее');",
							"    pm.expect(source.text).equal(target.text, 'Текст комментария должн соответствовать тексту комментария добавленного ранее');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{cid}}",
							"description": "(Required) id  комментария"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let comment;",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set(\"uid\", user.id)",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        const newComment = await api.addComment(user.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set(\"cid\", newComment.id)",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"pm.sendRequest({",
							"    url: pm.collectionVariables.get(\"baseUrl\") + \"/comments/\" + pm.collectionVariables.get(\"cid\"),",
							"    method: 'GET',",
							"}, (error, response) => {",
							"    pm.test(\"Комментарий должен быть удалён после выполнения запроса\", function () {",
							"    pm.expect(response.code).to.eql(404);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "commentId",
							"value": "{{cid}}",
							"description": "(Required) id  комментария"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария админом",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let comment;",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        const newComment = await api.addComment(user.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set(\"cid\", newComment.id)",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"pm.sendRequest({",
							"    url: pm.collectionVariables.get(\"baseUrl\") + \"/comments/\" + pm.collectionVariables.get(\"cid\"),",
							"    method: 'GET',",
							"}, (error, response) => {",
							"    pm.test(\"Комментарий должен быть удалён после выполнения запроса\", function () {",
							"    pm.expect(response.code).to.eql(404);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{cid}}",
							"description": "(Required) id  комментария"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addComment(userId, eventId, comment, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/comments/\" + eventId, comment, \"Ошибка при добавлении нового комментария: \", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"",
					"};",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"    ",
					"    getComment() {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "default"
		},
		{
			"key": "uid",
			"value": "1"
		},
		{
			"key": "eid",
			"value": "2",
			"type": "default"
		},
		{
			"key": "cid",
			"value": "1",
			"type": "default"
		},
		{
			"key": "response",
			"value": ""
		}
	]
}